name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]


jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          set -euo pipefail
          IMAGE_URI = "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "Building $IMAGE_URI"
          docker build -t "$IMAGE_URI" .  
          docker push "$IMAGE_URI"
          echo "image_uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"
          
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}
     

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: [self-hosted, ec2]
    env:
      AWS_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
      IMAGE_URI:   ${{ needs.Continuous-Integration.outputs.image_uri }}
      APP_PORT:    8080
      
    steps:
      - name: Debug IMAGE_URI
        run: echo "IMAGE_URI=${IMAGE_URI}"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull image
        run: docker pull "$IMAGE_URI"

      - name: Stop old container if exists
        run: docker ps -aq --filter "name=medical-chat-bot" | xargs -r docker rm -f

      - name: Run container
        env:
          OPENAI_API_KEY:   ${{ secrets.OPENAI_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        run: |
          docker run -d --restart unless-stopped --name medical-chat-bot \
            -e OPENAI_API_KEY="$OPENAI_API_KEY" \
            -e PINECONE_API_KEY="$PINECONE_API_KEY" \
            -p ${APP_PORT}:${APP_PORT} \
            "$IMAGE_URI"
