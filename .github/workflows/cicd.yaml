name: Deploy Docker to EC2

on:
  push:
    branches: [ "main" ]

jobs:
  ci:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}

      - id: login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, push
        id: build
        run: |
          set -e
          IMAGE_URI="${{ steps.login.outputs.registry }}/${{ secrets.ECR_REPO }}:latest"
          echo "Building ${IMAGE_URI}"
          docker build -t "${IMAGE_URI}" .
          docker push "${IMAGE_URI}"
          echo "image_uri=${IMAGE_URI}" >> "${GITHUB_OUTPUT}"

  cd:
    needs: ci
    runs-on: self-hosted
    env:
      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      IMAGE_URI:  ${{ needs.ci.outputs.image_uri }}
      APP_PORT:   8080
    steps:
      - uses: aws-actions/amazon-ecr-login@v2

      - name: Debug IMAGE_URI
        run: |
          echo "needs -> ${{ needs.ci.outputs.image_uri }}"
          echo "env   -> ${IMAGE_URI}"

      - name: Pull image
        run: docker pull "${IMAGE_URI}"

      - name: Stop old container if exists
        run: docker ps -aq --filter "name=medical-chat-bot" | xargs -r docker rm -f

      - name: Run container
        env:
          OPENAI_API_KEY:   ${{ secrets.OPENAI_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
        run: |
          docker run -d --restart unless-stopped --name medical-chat-bot \
            -e OPENAI_API_KEY="$OPENAI_API_KEY" \
            -e PINECONE_API_KEY="$PINECONE_API_KEY" \
            -p ${APP_PORT}:${APP_PORT} \
            "${IMAGE_URI}"
