name: Deploy Docker to EC2

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_TAG: ${{ github.run_number }}-${{ github.sha }}

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2  
        
      - name: Build and push Docker image
        run: |
          set -euo pipefail
          REGISTRY="${{ steps.login.outputs.registry }}"
          ECR_REPO="${{ secrets.ECR_REPO }}"
          IMAGE_URI="${REGISTRY}/${ECR_REPO}:${{ env.IMAGE_TAG }}"
          LATEST_URI="${REGISTRY}/${ECR_REPO}:latest"

          echo "üèóÔ∏è Building image: ${IMAGE_URI}"
          docker build --pull -t "${IMAGE_URI}" -t "${LATEST_URI}" .

          echo "üì§ Pushing image to ECR..."
          docker push "${IMAGE_URI}"
          docker push "${LATEST_URI}"

          echo "‚úÖ Image pushed: ${IMAGE_URI}"

  cd:
    needs: ci
    runs-on: self-hosted
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull image
        run: |
          set -euo pipefail
          echo "üì• Pulling image: ${IMAGE_URI}"
          docker pull "${IMAGE_URI}"

      - name: Stop old container if exists
        run: |
          set -euo pipefail
          echo "üõë Stopping existing container (if any)..."
          docker ps -aq --filter "name=medical-chat-bot" | xargs -r docker rm -f

      - name: Run container
        env:
          OPENAI_API_KEY:   ${{ secrets.OPENAI_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          APP_PORT:         8080
        run: |
            REGISTRY="${{ steps.login.outputs.registry }}" 
            ECR_REPO="${{ secrets.ECR_REPO }}" 
            IMAGE_URI="${REGISTRY}/${ECR_REPO}:${{ env.IMAGE_TAG }}"
            
            docker run -d \
              --restart unless-stopped \
              --name medical-chat-bot \
              -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
              -e PINECONE_API_KEY="${PINECONE_API_KEY}" \
              -p ${APP_PORT}:${APP_PORT} \
              "${IMAGE_URI}"
              
