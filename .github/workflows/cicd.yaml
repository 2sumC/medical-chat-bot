name: Build & Deploy Docker Image to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  ci:
    name: Build & Push to ECR
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}      
      ECR_REPOSITORY: ${{ secrets.ECR_REPO }}            

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Ensure ECR repository exists (idempotent)
        run: |
          aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 \
          || aws ecr create-repository --repository-name "$ECR_REPOSITORY" >/dev/null

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push
        id: push-image
        run: |
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:${{ github.sha }}"
          LATEST_URI="${{ steps.login-ecr.outputs.registry }}/${ECR_REPOSITORY}:latest"

          echo "Building $IMAGE_URI"
          docker build -t "$IMAGE_URI" .

          echo "Tagging as latest"
          docker tag "$IMAGE_URI" "$LATEST_URI"

          echo "Pushing both tags"
          docker push "$IMAGE_URI"
          docker push "$LATEST_URI"

          echo "image_uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"
    outputs:
      image_uri: ${{ steps.push-image.outputs.image_uri }}

  cd:
    name: Run container on EC2 (self-hosted runner)
    needs: ci
    runs-on: [self-hosted,ec2]
    permissions:
      contents: read
    env:
      AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
      IMAGE_URI: ${{ needs.ci.outputs.image_uri }}
      APP_PORT: 8080                            
    steps:
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull latest image
        run: |
          docker pull "$IMAGE_URI"

      - name: Stop old container if exists
        run: |
          docker ps -aq --filter "name=medical-chat-bot" | xargs -r docker rm -f

      - name: Run container
        env:
          OPENAI_API_KEY:    ${{ secrets.OPENAI_API_KEY }}
          PINECONE_API_KEY:  ${{ secrets.PINECONE_API_KEY }}
         
        run: |
          docker run -d --restart unless-stopped --name medical-chat-bot \
            -e OPENAI_API_KEY="$OPENAI_API_KEY" \
            -e PINECONE_API_KEY="$PINECONE_API_KEY" \
            -p ${APP_PORT}:${APP_PORT} \
            "$IMAGE_URI"
