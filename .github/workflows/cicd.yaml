name: Deploy Docker to EC2

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_TAG: ${{ github.run_number }}-${{ github.sha }}

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}   # 明确 region，避免 registry 为空
        
      - name: Build and push Docker image
        run: |
          set -euo pipefail
          REGISTRY="${{ steps.login.outputs.registry }}"
          # 可切换为 vars.ECR_REPO： REPO_RAW="${{ vars.ECR_REPO }}"
          REPO_RAW="${{ secrets.ECR_REPO }}"
          ECR_REPO="$(echo "${REPO_RAW}" | tr -d '[:space:]')"

          if [ -z "${REGISTRY}" ]; then
            echo "ERROR: ECR registry is empty. Check ecr login / region." >&2
            exit 1
          fi
          if [ -z "${ECR_REPO}" ]; then
            echo "ERROR: ECR_REPO is empty. Set it in Settings → Variables/Secrets." >&2
            exit 1
          fi

          IMAGE_URI="${REGISTRY}/${ECR_REPO}:${{ env.IMAGE_TAG }}"
          LATEST_URI="${REGISTRY}/${ECR_REPO}:latest"

          echo "🏗️ Building image: ${IMAGE_URI}"
          docker build --pull -t "${IMAGE_URI}" -t "${LATEST_URI}" .

          echo "📤 Pushing image to ECR..."
          docker push "${IMAGE_URI}"
          docker push "${LATEST_URI}"

          echo "✅ Image pushed: ${IMAGE_URI}"

  cd:
    needs: ci
    runs-on: self-hosted
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Login to Amazon ECR
        id: login
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}   # 明确 region
      
      - name: Compose IMAGE_URI (strict) & show context
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          set -euo pipefail
          REGISTRY="${{ steps.login.outputs.registry }}"
          # 可切换为 vars.ECR_REPO： REPO_RAW="${{ vars.ECR_REPO }}"
          REPO_RAW="${{ secrets.ECR_REPO }}"
          ECR_REPO="$(echo "${REPO_RAW}" | tr -d '[:space:]')"

          if [ -z "${REGISTRY}" ]; then
            echo "ERROR: ECR registry is empty. Check ecr login / region." >&2
            exit 1
          fi
          if [ -z "${ECR_REPO}" ]; then
            echo "ERROR: ECR_REPO is empty. Set it in Settings → Variables/Secrets." >&2
            exit 1
          fi
          if [ -z "${IMAGE_TAG}" ]; then
            echo "ERROR: IMAGE_TAG is empty." >&2
            exit 1
          fi

          IMAGE_URI="${REGISTRY}/${ECR_REPO}:${IMAGE_TAG}"
          echo "IMAGE_URI=${IMAGE_URI}" >> "$GITHUB_ENV"
          echo "Registry: ${REGISTRY}"
          echo "Repo:     ${ECR_REPO}"
          echo "Tag:      ${IMAGE_TAG}"

      - name: Check disk and prune if low
        run: |
          set -euo pipefail
          echo "Disk usage BEFORE:"
          df -h /
          echo
          USED_PCT=$(df --output=pcent / | tail -1 | tr -dc '0-9')
          if [ "$USED_PCT" -ge 90 ]; then
            echo "Low free space detected (used ${USED_PCT}%). Pruning docker artifacts..."
            docker ps -aq | xargs -r docker rm -f || true
            docker system prune -af --volumes || true
            docker builder prune -af || true
            echo "Disk usage AFTER prune:"
            df -h /
          else
            echo "Sufficient free space (used ${USED_PCT}%), skip prune."
          fi

      - name: Pull image
        run: |
          set -euo pipefail
          echo "📥 Pulling image: ${IMAGE_URI}"
          docker pull "${IMAGE_URI}"

      - name: Stop old container if exists
        run: |
          set -euo pipefail
          echo "🛑 Stopping existing container (if any)..."
          docker ps -aq --filter "name=medical-chat-bot" | xargs -r docker rm -f

      - name: Run container
        env:
          OPENAI_API_KEY:   ${{ secrets.OPENAI_API_KEY }}
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          APP_PORT:         8080
        run: |
          set -euo pipefail
          echo "🚀 Starting new container..."
          docker run -d \
            --restart unless-stopped \
            --name medical-chat-bot \
            --log-opt max-size=10m --log-opt max-file=3 \
            -e OPENAI_API_KEY="${OPENAI_API_KEY}" \
            -e PINECONE_API_KEY="${PINECONE_API_KEY}" \
            -p ${APP_PORT}:${APP_PORT} \
            "${IMAGE_URI}"
          echo "✅ Container started successfully"
